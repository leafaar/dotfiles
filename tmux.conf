# prefix
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
set -g base-index 1

# easy reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi keys
setw -g mode-keys vi

# mouse (off if you never use, on if you want to click panes/resize)
setw -g mouse on

# terminal
set-option -g default-terminal "screen-256color"

# basic keybinds
bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history
bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# splits & pane movement (vim-like)
bind-key v split-window -h
bind-key s split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane navigation for vim
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

# other navigation/layout
bind-key C-o rotate-window
bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80
set-window-option -g display-panes-time 1500
bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window
bind-key [ copy-mode
bind-key ] paste-buffer

# vim-style copy in copy-mode (linux: xclip)
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -in -selection clipboard"
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# notifications
setw -g monitor-activity on
set -g visual-activity on

# allow arrow key repeat
set-option -g repeat-time 0

##### --- COLORS --- #####
# status bar bg/fg
set-option -g status-interval 1
set-option -g status-style bg=colour234,fg=colour250

# left status (host, green)
set -g status-left '#[fg=colour41,bold]‚ùê #H #[default]'

# right status (date/time)
set -g status-right '#[fg=colour81]%Y-%m-%d #[fg=colour250]%H:%M:%S '

# window list: current/inactive window
set-window-option -g window-status-current-style bg=colour236,fg=colour81,bold
set-window-option -g window-status-style bg=colour234,fg=colour244

# pane borders
set-option -g pane-border-style fg=colour239
set-option -g pane-active-border-style fg=colour81

set-option -sg escape-time 10
set-option -a terminal-features ',xterm-256color:RGB'
set-option -g focus-events on
set-option -g set-clipboard on

# Better clipboard integration for nested sessions
set -g set-clipboard on
#set-window-option -g allow-passthrough on

# Alternative copy mode that works better nested
bind-key -T copy-mode-vi 'C-c' send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# OSC 52 clipboard support (works through SSH)
set -g set-clipboard on
set -ag terminal-overrides "vte*:XT:Ms=\\E]52;c;%p2%s\\7,xterm*:XT:Ms=\\E]52;c;%p2%s\\7"
